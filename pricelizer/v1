// Copyright 2023. All Rights Reserved.
// Flowboost Price Benchmark Labelizer
// custom requests? arjan@floboost.nl
//
// V1 - Initial release
//
// -- Make sure you register at https://library.florisdeschrijver.com for other free scripts, automation tips, how-to and much more (to come)
// -- Updates will be uploaded in the library first
//
// -- Newsletters to check > 
// ---- PPCMastery the PPC Edge newsletter > https://www.ppcmastery.com/blog/ 
//
// -- Inspired by Jack Gossington
// ---- Give him a follow https://www.linkedin.com/in/jack-gossington-3b6725166/
//
// ABOUT THE SCRIPT
// This script classifies products into 5 categories: over-index, index, near-index, no-index, and under-index. 
// It is designed to be run daily and helps monitor product performance over time for better campaign optimization.
// Do not forget to upload the sheet as additional feed in your merchant center and enable weekly schedule
//
// Step-by-step instructions:
// -- install script:             https://rebrand.ly/labelizer_script
// -- add as supplemental feed:   https://rebrand.ly/labelizer_feed
//
////////////////////////////////////////////////////////////////////

var config = {
    // Spreadheet link with product IDs
    SPREADSHEET_URL: "https://docs.google.com/spreadsheets/d/1I2IiELdjxHaH6103W7ME4bB6V-sf86U-OMi9yw_xjiU/edit#gid=0",
    
    // Replace with your merchant ID, enable Shopping Content API
    merchantId: 261237243,

    // Date settings
    daysAgo: 30, // the date range you want to look at, it does take the conversion lag into account
    conversionLag: "1", // amount of days you like to subtract from the today date, itâ€™s the days between a click happens and a sale
}

// Start script, don't add anything below this line
////////////////////////////////////////////////////////////////////

function main() {

    var productIds = getProductIds();
    var benchmarkData = getBenchmarkPrices(productIds);
    pushToSpreadsheetMerchant(benchmarkData);

    var products = getFilteredShoppingProducts(benchmarkData, config.daysAgo);
    products.sort(function (a, b) {
        return a[0] > b[0];
    });
    products = products.slice(0, 999999);
    pushToSpreadsheet(products);

    initializeOverTimeSheet();
    updateSheetWithDailyData(products);
}

function getProductIds() {
    let productIds = [];
    let pageToken;
    do {
        let response = ShoppingContent.Products.list(config.merchantId, { pageToken: pageToken });
        for (let i = 0; i < response.resources.length; i++) {
            let fullId = response.resources[i].id;
            let idParts = fullId.split(':');
            let actualId = idParts[idParts.length - 1];
            productIds.push(actualId);
        }
        pageToken = response.nextPageToken;
    } while (pageToken);
    return productIds;
}

function getBenchmarkPrices(productIds) {
    var priceData = [];
    var pageToken;
    var keepLooping = true;
    while (keepLooping) {
        var maxResults = 1e3;
        var queryString = "SELECT product_view.id, product_view.price_micros, price_competitiveness.benchmark_price_micros, price_competitiveness.country_code FROM PriceCompetitivenessProductView";
        var resource = { query: queryString, pageSize: maxResults, pageToken: pageToken };
        var priceReports = ShoppingContent.Reports.search(resource, config.merchantId);
        for (var i = 1; i < priceReports.results.length; i++) {
            var priceReport = priceReports.results[i];
            var productID = priceReport.productView.id.split(":").pop();
            if (productIds.includes(productID)) {
                var benchmarkPrice = priceReport.priceCompetitiveness.benchmarkPriceMicros * 0.000001;
                var productPrice = priceReport.productView.priceMicros * 0.000001; // Fetching product's actual price
                priceData.push([productID, benchmarkPrice, productPrice]);
            }
        }
        if (priceReports.nextPageToken == null) {
            keepLooping = false;
        } else {
            pageToken = priceReports.nextPageToken;
        }
    }
    return priceData;
}


function getFilteredShoppingProducts(benchmarkData, daysAgo) {
    var today = new Date();
    today.setDate(today.getDate() - config.conversionLag);
    var daysAgo = new Date(today.getFullYear(), today.getMonth(), today.getDate() - daysAgo);
    var dateFrom = Utilities.formatDate(daysAgo, AdWordsApp.currentAccount().getTimeZone(), 'yyyyMMdd');
    var dateTo = Utilities.formatDate(today, AdWordsApp.currentAccount().getTimeZone(), 'yyyyMMdd');

    var query =
        "SELECT CampaignName, OfferId, Impressions, Clicks, Ctr, Cost, Conversions, ConversionValue " +
        "FROM SHOPPING_PERFORMANCE_REPORT " +
        "DURING " + dateFrom + "," + dateTo;

    var products = [];
    var count = 0;
    var productTypeCounts = {
        'below-benchmark-price': 0,
        'at-benchmark-price': 0,
        'above-benchmark-price': 0
    };

    var report = AdWordsApp.report(query);
    var rows = report.rows();
    var aggregatedProducts = {};

    while (rows.hasNext()) {
        var row = rows.next();
        var offer_id = row['OfferId'];
        var impressions = parseInt(row['Impressions']);
        var clicks = parseInt(row['Clicks']);
        var cost = parseFloat(row['Cost'].replace(",", ""));
        var conversions = parseInt(row['Conversions']);
        var conversionValue = parseFloat(row['ConversionValue'].replace(",", ""));

        if (!aggregatedProducts.hasOwnProperty(offer_id)) {
            aggregatedProducts[offer_id] = {
                impressions: 0,
                clicks: 0,
                cost: 0,
                conversions: 0,
                conversionValue: 0
            };
        }

        aggregatedProducts[offer_id].impressions += impressions;
        aggregatedProducts[offer_id].clicks += clicks;
        aggregatedProducts[offer_id].cost += cost;
        aggregatedProducts[offer_id].conversions += conversions;
        aggregatedProducts[offer_id].conversionValue += conversionValue;
    }

    var totalConversions = 0;
    var totalClicks = 0;

    var report = AdWordsApp.report(query);
    var rows = report.rows();

    while (rows.hasNext()) {
        var row = rows.next();
        totalConversions += parseInt(row['Conversions']);
        totalClicks += parseInt(row['Clicks']);
    }

    for (var offer_id in aggregatedProducts) {
        var productData = aggregatedProducts[offer_id];
        var convValuePerCost = productData.conversionValue / productData.cost;
        if (isNaN(convValuePerCost) || !isFinite(convValuePerCost)) {
            convValuePerCost = 0;
        }
        var convPerCost = productData.cost / productData.conversions;
        if (isNaN(convPerCost) || !isFinite(convPerCost)) {
            convPerCost = 0;
        }

        var benchmarkPrice;
        var productPrice;
        for (var i = 0; i < benchmarkData.length; i++) {
            if (benchmarkData[i][0].toLowerCase() == offer_id) {
                benchmarkPrice = benchmarkData[i][1];
                productPrice = benchmarkData[i][2];
                break;
            }
        }

        var isProductType = '';    
        if (benchmarkPrice > productPrice) {
            isProductType = 'below-benchmark-price';
        } else if (benchmarkPrice < productPrice) {
            isProductType = 'above-benchmark-price';
        } else if (true) { // built variable
            isProductType = 'at-benchmark-price';
        } else {
            isProductType = 'no-benchmark-price';
        }

        // add product bucketing based on benchmark price
        // build a percentage difference value that's veriable

        productTypeCounts[isProductType]++;
        products.push([
            offer_id,
            productData.impressions.toString(),
            productData.clicks.toString(),
            productData.cost.toString(),
            productData.conversions.toString(),
            productData.conversionValue,
            convValuePerCost,
            convPerCost,
            isProductType,
        ]);
        count += 1;
    }
    Logger.log('Total products: ' + count);
    for (var productType in productTypeCounts) {
        Logger.log(productType + ': ' + productTypeCounts[productType]);
    }
    return products;
}

function initializeOverTimeSheet() {
    var spreadsheet = SpreadsheetApp.openByUrl(config.SPREADSHEET_URL);
    var sheet = spreadsheet.getSheetByName('overTime');
    var lastRow = sheet.getLastRow();

    if (lastRow === 0) {
        sheet.appendRow([
            'Date', 'above-benchmark-price Products', 'at-benchmark-price Products', 'below-benchmark-price Products',
            'above-benchmark-price Impressions', 'above-benchmark-price Clicks', 'above-benchmark-price Costs', 'above-benchmark-price Conversion Value', 'above-benchmark-price Conv Value/Cost',
            'at-benchmark-price Impressions', 'at-benchmark-price Clicks', 'at-benchmark-price Costs', 'at-benchmark-price Conversion Value', 'at-benchmark-price Conv Value/Cost',
            'below-benchmark-price Impressions', 'below-benchmark-price Clicks', 'below-benchmark-price Costs', 'below-benchmark-price Conversion Value', 'below-benchmark-price Conv Value/Cost'
        ]);
    }
}

function pushToSpreadsheet(data) {
    var spreadsheet = SpreadsheetApp.openByUrl(config.SPREADSHEET_URL);
    var sheet = spreadsheet.getSheetByName('customLabel');
    var lastRow = sheet.getMaxRows();
    sheet.getRange('A2:I' + lastRow).clearContent();
    var start_row = 2;
    var endRow = start_row + data.length - 1;
    var range = sheet.getRange('A' + start_row + ':' + 'I' + endRow);
    if (data.length > 0) {
        range.setValues(data);
    }
    return;
}

function pushToSpreadsheetMerchant(data) {
    var spreadsheet = SpreadsheetApp.openByUrl(config.SPREADSHEET_URL);
    var sheet = spreadsheet.getSheetByName('merchantData');
    sheet.getRange('A2:C' + sheet.getMaxRows()).clearContent();
    if (data.length > 0) {
        var range = sheet.getRange(2, 1, data.length, 3); // Changed from 2 to 3
        range.setValues(data);
    }
}


function updateSheetWithDailyData(products) {
    var buckets = ['above-benchmark-price', 'at-benchmark-price', 'below-benchmark-price'];
    var spreadsheet = SpreadsheetApp.openByUrl(config.SPREADSHEET_URL);
    var sheet = spreadsheet.getSheetByName('overTime');
    var today = new Date();
    today.setDate(today.getDate() - config.conversionLag);
    var lastRow = sheet.getLastRow();
    var lastDate = sheet.getRange(lastRow, 1).getValue();
    var newDate = new Date(today.getFullYear(), today.getMonth(), today.getDate());

    if (lastDate.toString() === newDate.toString()) {
        Logger.log("The script has already run for today. Skipping update.");
        return;
    }

    var productTypeCounts = {
        'below-benchmark-price': 0,
        'at-benchmark-price': 0,
        'above-benchmark-price': 0
    };

    var kpiTotals = {
        'below-benchmark-price': { impressions: 0, clicks: 0, costs: 0, conversionValue: 0, convValuePerCost: 0 },
        'at-benchmark-price': { impressions: 0, clicks: 0, costs: 0, conversionValue: 0, convValuePerCost: 0 },
        'above-benchmark-price': { impressions: 0, clicks: 0, costs: 0, conversionValue: 0, convValuePerCost: 0 }
    };

    for (var i = 0; i < products.length; i++) {
        var productType = products[i][8];
        productTypeCounts[productType]++;

        kpiTotals[productType].impressions += parseFloat(products[i][1]);
        kpiTotals[productType].clicks += parseFloat(products[i][2]);
        kpiTotals[productType].costs += parseFloat(products[i][3]);
        kpiTotals[productType].conversionValue += parseFloat(products[i][5]);
        kpiTotals[productType].convValuePerCost += parseFloat(products[i][6]);
    }

    var newRow = lastRow + 1;
    sheet.getRange(newRow, 1).setValue(newDate);
    sheet.getRange(newRow, 2).setValue(productTypeCounts['below-benchmark-price']);
    sheet.getRange(newRow, 3).setValue(productTypeCounts['at-benchmark-price']);
    sheet.getRange(newRow, 4).setValue(productTypeCounts['above-benchmark-price']);

    for (var i = 0; i < buckets.length; i++) {
        var bucket = buckets[i];
        sheet.getRange(newRow, 7 + i * 5).setValue(kpiTotals[bucket].impressions);
        sheet.getRange(newRow, 8 + i * 5).setValue(kpiTotals[bucket].clicks);
        sheet.getRange(newRow, 9 + i * 5).setValue(kpiTotals[bucket].costs);

        var conversionValue = parseFloat(kpiTotals[bucket].conversionValue);
        sheet.getRange(newRow, 10 + i * 5).setValue(conversionValue);

        var costs = parseFloat(kpiTotals[bucket].costs);
        var convValuePerCost = conversionValue / costs;
        if (isNaN(convValuePerCost) || !isFinite(convValuePerCost)) {
            convValuePerCost = 0;
        }
        sheet.getRange(newRow, 11 + i * 5).setValue(convValuePerCost);
    }
    Logger.log("Daily data updated successfully.");
}
